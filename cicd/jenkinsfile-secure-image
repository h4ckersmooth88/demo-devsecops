//deklarasi variable
def imageLineDev = ""

pipeline {
    agent any
   
    stages{
        stage('Checkout'){
            steps {
		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/alanadiprastyo/demo-devsecops.git']]])
            }
        }
        stage('Dependency Check with Python Safety'){
            steps{
               		//sh "docker run -v \$(pwd):/src --rm hysnsec/safety check -r app/requirements.txt --json > sca-scaning-safety.json  || true"
			sh "/usr/local/bin/safety check -r app/requirements.txt --json > sca-scaning-safety.json  || true"
		    	archiveArtifacts artifacts: 'sca-scaning-safety.json', onlyIfSuccessful: true //fingerprint: true
	}
        }
        stage('Static Analysis with python-taint'){
            steps{
		    	echo "SCA test Python Taint"
               		//sh "docker run -v \$(pwd):/src --rm vickyrajagopal/python-taint-docker pyt . -j > sca-scaning-pyt.json  || true"
			sh "/usr/local/bin/pyt app/ -j > sca-scaning-pyt.json  || true"
		    	archiveArtifacts artifacts: 'sca-scaning-pyt.json', onlyIfSuccessful: true //fingerprint: true
			
	}
        }
        stage('Python Bandit Security Scan'){
            steps{
		    	echo "SAST test Python Bandit"
               		//sh "docker run -v \$(pwd):/src --rm secfigo/bandit:latest bandit . -f json > sca-scaning-bandit.json  || true"
			sh "/usr/local/bin/bandit -r app/ -f json  > sca-scaning-bandit.json  || true"
		    	archiveArtifacts artifacts: 'sca-scaning-bandit.json', onlyIfSuccessful: true //fingerprint: true
			
	}
        }
      stage('Static Analysis with SonarQube') {
   	steps {
       		script {
		   sh '''/var/lib/jenkins/sonar-scanner/bin/sonar-scanner \
		   -Dsonar.projectKey=demo-devsecops \
		   -Dsonar.sources=. \
		   -Dsonar.css.node=. \
		   -Dsonar.host.url=http://192.168.1.31:9000\
		   -Dsonar.login=44c1e369a8e63f387d0935b95e1f4ddb018ec593'''
              		}
       		}
	}
        stage('Build Docker Image'){
            steps{
                sh "docker build -t test-apps-vuln ."
                sh "docker tag test-apps-vuln quay.io/alanadiprastyo/test-apps-vuln:v1.${env.BUILD_ID}"
		sh "docker tag test-apps-vuln quay.io/alanadiprastyo/test-apps-vuln:latest"
            }
        }
        stage('Push Docker Image to Quay'){
            steps{
                sh "docker push quay.io/alanadiprastyo/test-apps-vuln:v1.${env.BUILD_ID}"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:latest"
            }
        }

        stage('Scan Image with anchore'){
		steps{	
			sh "echo 'scan image docker use ancore'"
			script {
			imageLineDev = 'registry.access.redhat.com/ubi8/ubi-minimal:latest'
			writeFile file: 'anchore_images', text: imageLineDev
			anchore name: 'anchore_images'
			}
		}
       }

	stage('Deploy to Dev'){
		steps{
			echo "Deploy to Dev"
			sh "oc login -u kubeadmin -p APBEh-jjrVy-hLQZX-VI9Kg https://api.crc.testing:6443"
			sh "sed -i s/UPDATE/v1.${env.BUILD_ID}/g deployments/devsecops-dev.yaml"
			sh "oc apply -f deployments/devsecops-dev.yaml"
		}
	}    
	}
}
